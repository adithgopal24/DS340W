#preds <- preds %>% mutate(plate_x2 = plate_x^2, plate_z2 = plate_z^2,
#        plate_x3 = plate_x2 * plate_x, plate_z3 = plate_z2 * plate_z,
#       plate_xz = plate_x * plate_z,
#      plate_x2z = plate_x^2 * plate_z,
#     plate_xz2 = plate_x * plate_z^2) %>% add_predictions(strike_prob_model) %>% mutate(strike_prob = 1/(1+exp(-1*pred)))
#strike_predictions <- predict(strike_prob_model, type="response", newdata = preds)
#preds <- preds %>% add_column(strike_predictions)
zone_preds <- xgb.DMatrix(data = as.matrix(preds))
strikezone_preds <- predict(strike_prob_mod, zone_preds, reshape = T)
strikezone_preds <- as.data.frame(strikezone_preds)
preds <- preds %>% bind_cols(strikezone_preds)
topKzone <- mean(hit_data$sz_top, na.rm = T)
botKzone <- mean(hit_data$sz_bot, na.rm = T)
inKzone <- -0.84
outKzone <- 0.84
kZone <- data.frame(
x=c(inKzone, inKzone, outKzone, outKzone, inKzone),
y=c(botKzone, topKzone, topKzone, botKzone, botKzone))
# construct the plot
ggplot(kZone, aes(x, y)) +
geom_tile(data=preds,
aes(x=plate_x, y=plate_z, fill= strikezone_preds)) +
scale_fill_distiller(palette = "Spectral") +
geom_path(lwd=1.5, col="black") +
coord_fixed() +
ggtitle("Ball vs Strike") +
labs(fill = "Strike Probability", y = "", x = "") +
theme(axis.title.y = element_text(angle = 0, vjust = .5, hjust= .5))
takes$pitch_id <- seq(1, nrow(takes))
ball_next <- takes
ball_next <- ball_next %>% mutate(balls_new = ifelse(balls < 3, balls + 1, 0),
strikes_new = ifelse(balls < 3, strikes, 0),
outs_when_up_new = outs_when_up,
on_1b_new = ifelse(balls == 3 & is.na(on_1b), 1, on_1b),
on_2b_new = ifelse(balls == 3 & !is.na(on_1b), 1, on_2b),
on_3b_new = ifelse(balls == 3 & !is.na(on_1b) & !is.na(on_2b), 1, on_3b)) %>%
mutate(count_base_out_state_new = paste(balls_new, "-", strikes_new, ", ", outs_when_up_new, " outs, ", ifelse(!is.na(.$on_1b_new), "1b", "_"), ifelse(!is.na(.$on_2b_new), "2b", "_"), ifelse(!is.na(.$on_3b_new), "3b", "_")))
# merge run exxpectancy table to new data
ball_next <- ball_next %>% left_join(run_expectancy_state_table, by = c("count_base_out_state_new" = "count_base_out_state"))
run_expectancy_state_table <- hit_data
glimpse(run_expectancy_state_table)
glimpse(ball_next)
takes$pitch_id <- seq(1, nrow(takes))
ball_next <- takes
ball_next <- ball_next %>% mutate(balls_new = ifelse(balls < 3, balls + 1, 0),
strikes_new = ifelse(balls < 3, strikes, 0),
outs_when_up_new = outs_when_up,
on_1b_new = ifelse(balls == 3 & is.na(on_1b), 1, on_1b),
on_2b_new = ifelse(balls == 3 & !is.na(on_1b), 1, on_2b),
on_3b_new = ifelse(balls == 3 & !is.na(on_1b) & !is.na(on_2b), 1, on_3b)) %>%
mutate(count_base_out_state_new = paste(balls_new, "-", strikes_new, ", ", outs_when_up_new, " outs, ", ifelse(!is.na(.$on_1b_new), "1b", "_"), ifelse(!is.na(.$on_2b_new), "2b", "_"), ifelse(!is.na(.$on_3b_new), "3b", "_")))
# merge run exxpectancy table to new data
ball_next <- ball_next %>% left_join(run_expectancy_state_table, by = c("count_base_out_state_new" = "count_base_out_state"))
#pitch_df <- pitches_2017
#startdate = "2017-04-02"
#enddate = "2017-10-01"
#remove(pitch_df, startdate, enddate)
apply_EAGLE <- function(pitch_df, startdate, enddate){
hit_data <- pitch_df
startdate <- as.Date(startdate)
enddate <- as.Date(enddate)
# Remove accents from player names
hit_data$player_name <- stri_trans_general(hit_data$player_name, "Latin-ASCII")
hit_data$pitcher_name <- stri_trans_general(hit_data$pitcher_name, "Latin-ASCII")
hit_data <- hit_data %>% run_expectancy_code(level = "pitch")
hit_data$description <- as.factor(hit_data$description)
########
## merge to data
basic_batter_stats <- daily_batter_bref(startdate, enddate)
basic_batter_stats$bbref_id <- as.numeric(basic_batter_stats$bbref_id)
hit_data <- hit_data %>% separate(player_name, into = c("Last", "First"), sep = ", ") %>% mutate(Name = paste(First, Last))
hit_data <- hit_data %>% inner_join(basic_batter_stats, by = c("Name"))
hit_data_outcomes <- hit_data %>% mutate(barrel = ifelse(launch_angle <= 50 & launch_speed >= 98 & launch_speed * 1.5 - launch_angle >= 117 & launch_speed + launch_angle >= 124, 1, 0))
# Fix character columns
hit_data_outcomes[which(hit_data_outcomes$launch_speed_angle == "null"),"launch_speed_angle"] <- NA
hit_data_outcomes[which(hit_data_outcomes$estimated_ba_using_speedangle == "null"), "estimated_ba_using_speedangle"] <- NA
hit_data_outcomes[which(hit_data_outcomes$estimated_woba_using_speedangle == "null"), "estimated_woba_using_speedangle"] <- NA
hit_data_outcomes[which(hit_data_outcomes$woba_value == "null"), "woba_value"] <- NA
hit_data_outcomes[which(hit_data_outcomes$iso_value == "null"), "iso_value"] <- NA
hit_data_outcomes$launch_speed_angle <- as.numeric(hit_data_outcomes$launch_speed_angle)
hit_data_outcomes$estimated_ba_using_speedangle <- as.numeric(hit_data_outcomes$estimated_ba_using_speedangle)
hit_data_outcomes$estimated_woba_using_speedangle <- as.numeric(hit_data_outcomes$estimated_woba_using_speedangle)
hit_data_outcomes$woba_value <- as.numeric(hit_data_outcomes$woba_value)
hit_data_outcomes$iso_value <- as.numeric(hit_data_outcomes$iso_value)
grouped_stats <- hit_data_outcomes %>% group_by(batter, zone) %>% summarise(barrel_perc = mean(barrel, na.rm = T), avg_launch_angle = mean(launch_angle, na.rm = T), avg_exit_velocity = mean(launch_speed, na.rm = T), xAVG = mean(estimated_ba_using_speedangle, na.rm = T), xwOBA = mean(estimated_woba_using_speedangle, na.rm = T), wOBA = mean(woba_value, na.rm = T), ISO = mean(iso_value, na.rm = T))
hit_data_outcomes <- hit_data_outcomes %>% inner_join(grouped_stats, by = c("batter", "zone"))
hit_data_outcomes <- hit_data_outcomes %>% separate(pitcher_name, into = c("last_name", "first_name"), sep = ", ") %>% mutate(pitcher_name = paste(first_name, last_name, sep = " "))
basic_pitcher_stats <- daily_pitcher_bref(startdate, enddate)
basic_pitcher_stats$bbref_id <- as.numeric(basic_pitcher_stats$bbref_id)
hit_data_outcomes <- hit_data_outcomes %>% inner_join(basic_pitcher_stats, by = c("pitcher_name" = "Name"))
grouped_pitching_stats <- hit_data_outcomes %>% group_by(pitcher) %>% summarise(overall_spin_rate = mean(release_spin_rate, na.rm = T), overall_velocity = mean(release_speed, na.rm = T))
hit_data <- hit_data_outcomes %>% inner_join(grouped_pitching_stats, by = "pitcher")
hit_data$pitch_id <- seq(1, nrow(hit_data))
hit_data_outcomes$pitch_id <- seq(1, nrow(hit_data_outcomes))
hit_data <- hit_data %>% select(-c(G.x, AB.x, R.x, H.x, X1B.x, X2B.x, X3B.x, HR.x, RBI, IBB.x, uBB.x, HBP.x, SH, SF.x, GDP.x, SB.x, CS.x, G.y, GS, W, L, SV, H.y, R.y, ER, uBB.y, BB.y, SO.y, HR.y, HBP.y,  X1B.y, X2B.y, X3B.y, IBB.y, GDP.y, SF.y, SB.y, CS.y, PO, BF, Pit, Str, StL, StS, LD, PU, BAbip, SO9, SO.W, SO_uBB ))
########
ball_next <- hit_data
ball_next <- ball_next %>% mutate(balls_new = ifelse(balls < 3, balls + 1, 0),
strikes_new = ifelse(balls < 3, strikes, 0),
outs_when_up_new = outs_when_up,
on_1b_new = ifelse(balls == 3 & is.na(on_1b), 1, on_1b),
on_2b_new = ifelse(balls == 3 & !is.na(on_1b), 1, on_2b),
on_3b_new = ifelse(balls == 3 & !is.na(on_1b) & !is.na(on_2b), 1, on_3b)) %>%
mutate(count_base_out_state_new = paste(balls_new, "-", strikes_new, ", ", outs_when_up_new, " outs, ", ifelse(!is.na(.$on_1b_new), "1b", "_"), ifelse(!is.na(.$on_2b_new), "2b", "_"), ifelse(!is.na(.$on_3b_new), "3b", "_")))
# merge run exxpectancy table to new data
ball_next <- ball_next %>% left_join(run_expectancy_state_table, by = c("count_base_out_state_new" = "count_base_out_state"))
strike_next <- hit_data
strike_next <- strike_next %>% mutate(balls_new = ifelse(strikes < 2, balls, 0),
strikes_new = ifelse(strikes < 2, strikes + 1, 0),
outs_when_up_new = ifelse(strikes < 2, outs_when_up, outs_when_up + 1),
on_1b_new =  on_1b,
on_2b_new = on_2b,
on_3b_new = on_3b) %>%
mutate(count_base_out_state_new = paste(balls_new, "-", strikes_new, ", ", outs_when_up_new, " outs, ", ifelse(!is.na(.$on_1b_new), "1b", "_"), ifelse(!is.na(.$on_2b_new), "2b", "_"), ifelse(!is.na(.$on_3b_new), "3b", "_")))
# merge run exxpectancy table to new data
strike_next <- strike_next %>% left_join(run_expectancy_state_table, by = c("count_base_out_state_new" = "count_base_out_state"))
strike_next[which(strike_next$outs_when_up_new == 3), "avg_re.y"] <- 0
### APPLY DRE for ball
dre_ball_orig <- ball_next %>% select(balls, strikes, outs_when_up, on_1b, on_2b, on_3b, OPS)
xgb.ball_orig = xgb.DMatrix(data = as.matrix(dre_ball_orig))
dre_ball_preds <- predict(dre_mod, xgb.ball_orig)
dre_ball_preds <- as.data.frame(dre_ball_preds)
ball_next <- ball_next %>% bind_cols(dre_ball_preds)
ball_next <- ball_next %>% rename(dre_ball_orig_preds = dre_ball_preds) %>% mutate(avg_re.x = avg_re.x + dre_ball_orig_preds)
### APPLY DRE for ball next
dre_ball_next <- ball_next %>% select(balls_new, strikes_new, outs_when_up_new, on_1b_new, on_2b_new, on_3b_new, OPS) %>% rename(balls = balls_new, strikes = strikes_new, outs_when_up = outs_when_up_new, on_1b = on_1b_new, on_2b = on_2b_new, on_3b = on_3b_new)
xgb.ball_next = xgb.DMatrix(data = as.matrix(dre_ball_next))
dre_ball_preds <- predict(dre_mod, xgb.ball_next)
dre_ball_preds <- as.data.frame(dre_ball_preds)
ball_next <- ball_next %>% bind_cols(dre_ball_preds) %>% rename(dre_ball_next_preds = dre_ball_preds) %>% mutate(avg_re.y = ifelse(balls == 3, avg_re.y, avg_re.y + dre_ball_next_preds))
##### Apply for strikes
### APPLY DRE for strike
dre_strike_orig <- strike_next %>% select(balls, strikes, outs_when_up, on_1b, on_2b, on_3b, OPS)
xgb.strike_orig = xgb.DMatrix(data = as.matrix(dre_strike_orig))
dre_strike_preds <- predict(dre_mod, xgb.strike_orig)
dre_strike_preds <- as.data.frame(dre_strike_preds)
strike_next <- strike_next %>% bind_cols(dre_strike_preds) %>% rename(dre_strike_orig_preds = dre_strike_preds) %>% mutate(avg_re.x = avg_re.x + dre_strike_orig_preds)
### APPLY DRE for strike next
dre_strike_next <- strike_next %>% select(balls_new, strikes_new, outs_when_up_new, on_1b_new, on_2b_new, on_3b_new, OPS) %>% rename(balls = balls_new, strikes = strikes_new, outs_when_up = outs_when_up_new, on_1b = on_1b_new, on_2b = on_2b_new, on_3b = on_3b_new)
xgb.strike_next = xgb.DMatrix(data = as.matrix(dre_strike_next))
dre_strike_preds <- predict(dre_mod, xgb.strike_next)
dre_strike_preds <- as.data.frame(dre_strike_preds)
strike_next <- strike_next %>% bind_cols(dre_strike_preds) %>% rename(dre_strike_next_preds = dre_strike_preds) %>% mutate(avg_re.y = ifelse(strikes == 2, avg_re.y, avg_re.y + dre_strike_next_preds))
#####
hit_data_ball <- ball_next %>% mutate(avg_re.ball = avg_re.y - avg_re.x) %>%
select(pitch_id, count_base_out_state_new, avg_re.ball) %>%
rename(count_base_out_state_ball = count_base_out_state_new)
hit_data_outcomes <- strike_next %>% mutate(avg_re.strike = avg_re.y - avg_re.x) %>%
rename(count_base_out_state_orig = count_base_out_state, count_base_out_state_strike = count_base_out_state_new, avg_re.orig = avg_re.x) %>% left_join(hit_data_ball, by = "pitch_id")
#hit_data_outcomes <- hit_data_outcomes %>% mutate(plate_x2 = plate_x^2, plate_z2 = plate_z^2,
# plate_x3 = plate_x2 * plate_x, plate_z3 = plate_z2 * plate_z,
# plate_xz = plate_x * plate_z,
# plate_x2z = plate_x^2 * plate_z,
# plate_xz2 = plate_x * plate_z^2)
#hit_data_outcomes <- hit_data_outcomes %>% add_predictions(strike_prob_model, var = "strike_prob", type = "response")
takes <- hit_data_outcomes %>% select(plate_x, plate_z, sz_top, sz_bot)
xgb_takes <- xgb.DMatrix(data = as.matrix(takes))
takes_preds <- predict(strike_prob_mod, xgb_takes, reshape = T)
takes_preds <- as.data.frame(takes_preds)
hit_data_outcomes <- hit_data_outcomes %>% bind_cols(takes_preds) %>% rename(strike_prob = takes_preds)
########
###### Misses
miss_next <- hit_data
miss_next <- miss_next %>% mutate(balls_new = ifelse(strikes < 2, balls, 0),
strikes_new = ifelse(strikes < 2, strikes + 1, 0),
outs_when_up_new = ifelse(strikes < 2, outs_when_up, outs_when_up + 1),
on_1b_new = on_1b,
on_2b_new = on_2b,
on_3b_new = on_3b) %>%
mutate(count_base_out_state_new = paste(balls_new, "-", strikes_new, ", ", outs_when_up_new, " outs, ", ifelse(!is.na(.$on_1b_new), "1b", "_"), ifelse(!is.na(.$on_2b_new), "2b", "_"), ifelse(!is.na(.$on_3b_new), "3b", "_")))
# merge run exxpectancy table to new data
miss_next <- miss_next %>% left_join(run_expectancy_state_table, by = c("count_base_out_state_new" = "count_base_out_state"))
miss_next[which(miss_next$outs_when_up_new == 3), "avg_re.y"] <- 0
### APPLY DRE for miss
dre_miss_orig <- miss_next %>% select(balls, strikes, outs_when_up, on_1b, on_2b, on_3b, OPS)
xgb.miss_orig = xgb.DMatrix(data = as.matrix(dre_miss_orig))
dre_miss_preds <- predict(dre_mod, xgb.miss_orig)
dre_miss_preds <- as.data.frame(dre_miss_preds)
miss_next <- miss_next %>% bind_cols(dre_miss_preds) %>% rename(dre_miss_orig_preds = dre_miss_preds) %>% mutate(avg_re.x = avg_re.x + dre_miss_orig_preds)
### APPLY DRE for miss next
dre_miss_next <- miss_next %>% select(balls_new, strikes_new, outs_when_up_new, on_1b_new, on_2b_new, on_3b_new, OPS) %>% rename(balls = balls_new, strikes = strikes_new, outs_when_up = outs_when_up_new, on_1b = on_1b_new, on_2b = on_2b_new, on_3b = on_3b_new)
xgb.miss_next = xgb.DMatrix(data = as.matrix(dre_miss_next))
dre_miss_preds <- predict(dre_mod, xgb.miss_next)
dre_miss_preds <- as.data.frame(dre_miss_preds)
miss_next <- miss_next %>% bind_cols(dre_miss_preds) %>% rename(dre_miss_next_preds = dre_miss_preds) %>% mutate(avg_re.y = ifelse(strikes == 2, avg_re.y, avg_re.y + dre_miss_next_preds))
###### Fouls
foul_next <- hit_data
foul_next <- foul_next %>% mutate(balls_new = balls,
strikes_new = ifelse(strikes < 2, strikes + 1, 2),
outs_when_up_new = outs_when_up,
on_1b_new = on_1b,
on_2b_new = on_2b,
on_3b_new = on_3b) %>%
mutate(count_base_out_state_new = paste(balls_new, "-", strikes_new, ", ", outs_when_up_new, " outs, ", ifelse(!is.na(.$on_1b_new), "1b", "_"), ifelse(!is.na(.$on_2b_new), "2b", "_"), ifelse(!is.na(.$on_3b_new), "3b", "_")))
# merge run exxpectancy table to new data
foul_next <- foul_next %>% left_join(run_expectancy_state_table, by = c("count_base_out_state_new" = "count_base_out_state"))
### APPLY DRE for foul
dre_foul_orig <- foul_next %>% select(balls, strikes, outs_when_up, on_1b, on_2b, on_3b, OPS)
xgb.foul_orig = xgb.DMatrix(data = as.matrix(dre_foul_orig))
dre_foul_preds <- predict(dre_mod, xgb.foul_orig)
dre_foul_preds <- as.data.frame(dre_foul_preds)
foul_next <- foul_next %>% bind_cols(dre_foul_preds) %>% rename(dre_foul_orig_preds = dre_foul_preds) %>% mutate(avg_re.x = avg_re.x + dre_foul_orig_preds)
### APPLY DRE for foul next
dre_foul_next <- foul_next %>% select(balls_new, strikes_new, outs_when_up_new, on_1b_new, on_2b_new, on_3b_new, OPS) %>% rename(balls = balls_new, strikes = strikes_new, outs_when_up = outs_when_up_new, on_1b = on_1b_new, on_2b = on_2b_new, on_3b = on_3b_new)
xgb.foul_next = xgb.DMatrix(data = as.matrix(dre_foul_next))
dre_foul_preds <- predict(dre_mod, xgb.foul_next)
dre_foul_preds <- as.data.frame(dre_foul_preds)
foul_next <- foul_next %>% bind_cols(dre_foul_preds) %>% rename(dre_foul_next_preds = dre_foul_preds) %>% mutate(avg_re.y = avg_re.y + dre_foul_next_preds)
###### Outs
out_next <- hit_data
out_next <- out_next %>% mutate(balls_new = 0,
strikes_new = 0,
outs_when_up_new = outs_when_up + 1,
on_1b_new = on_1b,
on_2b_new = on_2b,
on_3b_new = on_3b) %>%
mutate(count_base_out_state_new = paste(balls_new, "-", strikes_new, ", ", outs_when_up_new, " outs, ", ifelse(!is.na(.$on_1b_new), "1b", "_"), ifelse(!is.na(.$on_2b_new), "2b", "_"), ifelse(!is.na(.$on_3b_new), "3b", "_")))
# merge run exxpectancy table to new data
out_next <- out_next %>% left_join(run_expectancy_state_table, by = c("count_base_out_state_new" = "count_base_out_state"))
out_next[which(out_next$outs_when_up_new == 3), "avg_re.y"] <- 0
### APPLY DRE for out
dre_out_orig <- out_next %>% select(balls, strikes, outs_when_up, on_1b, on_2b, on_3b, OPS)
xgb.out_orig = xgb.DMatrix(data = as.matrix(dre_out_orig))
dre_out_preds <- predict(dre_mod, xgb.out_orig)
dre_out_preds <- as.data.frame(dre_out_preds)
out_next <- out_next %>% bind_cols(dre_out_preds) %>% rename(dre_out_orig_preds = dre_out_preds) %>% mutate(avg_re.x = avg_re.x + dre_out_orig_preds)
###### Single
single_next <- hit_data
single_next <- single_next %>% mutate(balls_new = 0,
strikes_new = 0,
outs_when_up_new = outs_when_up,
on_1b_new = ifelse(is.na(on_1b), 1, on_1b),
on_2b_new = ifelse(is.na(on_1b), on_1b, 1),
on_3b_new = ifelse(is.na(on_2b), on_2b, 1)) %>%
mutate(count_base_out_state_new = paste(balls_new, "-", strikes_new, ", ", outs_when_up_new, " outs, ", ifelse(!is.na(.$on_1b_new), "1b", "_"), ifelse(!is.na(.$on_2b_new), "2b", "_"), ifelse(!is.na(.$on_3b_new), "3b", "_")))
# merge run exxpectancy table to new data
single_next <- single_next %>% left_join(run_expectancy_state_table, by = c("count_base_out_state_new" = "count_base_out_state"))
### APPLY DRE for single
dre_single_orig <- single_next %>% select(balls, strikes, outs_when_up, on_1b, on_2b, on_3b, OPS)
xgb.single_orig = xgb.DMatrix(data = as.matrix(dre_single_orig))
dre_single_preds <- predict(dre_mod, xgb.single_orig)
dre_single_preds <- as.data.frame(dre_single_preds)
single_next <- single_next %>% bind_cols(dre_single_preds) %>% rename(dre_single_orig_preds = dre_single_preds) %>% mutate(avg_re.x = avg_re.x + dre_single_orig_preds)
####### Double
double_next <- hit_data
double_next <- double_next %>% mutate(balls_new = 0,
strikes_new = 0,
outs_when_up_new = outs_when_up,
on_1b_new = NA,
on_2b_new = 1,
on_3b_new = ifelse(is.na(on_1b), on_1b, 1)) %>%
mutate(count_base_out_state_new = paste(balls_new, "-", strikes_new, ", ", outs_when_up_new, " outs, ", ifelse(!is.na(.$on_1b_new), "1b", "_"), ifelse(!is.na(.$on_2b_new), "2b", "_"), ifelse(!is.na(.$on_3b_new), "3b", "_")))
# merge run exxpectancy table to new data
double_next <- double_next %>% left_join(run_expectancy_state_table, by = c("count_base_out_state_new" = "count_base_out_state"))
### APPLY DRE for double
dre_double_orig <- double_next %>% select(balls, strikes, outs_when_up, on_1b, on_2b, on_3b, OPS)
xgb.double_orig = xgb.DMatrix(data = as.matrix(dre_double_orig))
dre_double_preds <- predict(dre_mod, xgb.double_orig)
dre_double_preds <- as.data.frame(dre_double_preds)
double_next <- double_next %>% bind_cols(dre_double_preds) %>% rename(dre_double_orig_preds = dre_double_preds) %>% mutate(avg_re.x = avg_re.x + dre_double_orig_preds)
###### Triple
triple_next <- hit_data
triple_next <- triple_next %>% mutate(balls_new = 0,
strikes_new = 0,
outs_when_up_new = outs_when_up,
on_1b_new = NA,
on_2b_new = NA,
on_3b_new = 1) %>%
mutate(count_base_out_state_new = paste(balls_new, "-", strikes_new, ", ", outs_when_up_new, " outs, ", ifelse(!is.na(.$on_1b_new), "1b", "_"), ifelse(!is.na(.$on_2b_new), "2b", "_"), ifelse(!is.na(.$on_3b_new), "3b", "_")))
# merge run exxpectancy table to new data
triple_next <- triple_next %>% left_join(run_expectancy_state_table, by = c("count_base_out_state_new" = "count_base_out_state"))
### APPLY DRE for triple
dre_triple_orig <- triple_next %>% select(balls, strikes, outs_when_up, on_1b, on_2b, on_3b, OPS)
xgb.triple_orig = xgb.DMatrix(data = as.matrix(dre_triple_orig))
dre_triple_preds <- predict(dre_mod, xgb.triple_orig)
dre_triple_preds <- as.data.frame(dre_triple_preds)
triple_next <- triple_next %>% bind_cols(dre_triple_preds) %>% rename(dre_triple_orig_preds = dre_triple_preds) %>% mutate(avg_re.x = avg_re.x + dre_triple_orig_preds)
####### Homerun
homerun_next <- hit_data
homerun_next <- homerun_next %>% mutate(balls_new = 0,
strikes_new = 0,
outs_when_up_new = outs_when_up,
on_1b_new = NA,
on_2b_new = NA,
on_3b_new = NA) %>%
mutate(count_base_out_state_new = paste(balls_new, "-", strikes_new, ", ", outs_when_up_new, " outs, ", ifelse(!is.na(.$on_1b_new), "1b", "_"), ifelse(!is.na(.$on_2b_new), "2b", "_"), ifelse(!is.na(.$on_3b_new), "3b", "_")))
# merge run exxpectancy table to new data
homerun_next <- homerun_next %>% left_join(run_expectancy_state_table, by = c("count_base_out_state_new" = "count_base_out_state"))
remove(hit_data)
### APPLY DRE for homerun
dre_homerun_orig <- homerun_next %>% select(balls, strikes, outs_when_up, on_1b, on_2b, on_3b, OPS)
xgb.homerun_orig = xgb.DMatrix(data = as.matrix(dre_homerun_orig))
dre_homerun_preds <- predict(dre_mod, xgb.homerun_orig)
dre_homerun_preds <- as.data.frame(dre_homerun_preds)
homerun_next <- homerun_next %>% bind_cols(dre_homerun_preds) %>% rename(dre_homerun_orig_preds = dre_homerun_preds) %>% mutate(avg_re.x = avg_re.x + dre_homerun_orig_preds)
########
hit_data_miss <- miss_next %>% mutate(avg_re.miss = avg_re.y - avg_re.x) %>%
select(pitch_id, count_base_out_state_new, avg_re.miss) %>%
rename(count_base_out_state_miss = count_base_out_state_new)
hit_data_foul <- foul_next %>% mutate(avg_re.foul = avg_re.y - avg_re.x) %>%
select(pitch_id, count_base_out_state_new, avg_re.foul) %>%
rename(count_base_out_state_foul = count_base_out_state_new)
hit_data_out <- out_next %>% mutate(avg_re.out = avg_re.y - avg_re.x) %>%
select(pitch_id, count_base_out_state_new, avg_re.out) %>%
rename(count_base_out_state_out = count_base_out_state_new)
hit_data_single <- single_next %>% mutate(avg_re.single = avg_re.y - avg_re.x) %>%
select(pitch_id,  count_base_out_state_new, avg_re.single) %>%
rename(count_base_out_state_single = count_base_out_state_new)
hit_data_double <- double_next %>% mutate(avg_re.double = avg_re.y - avg_re.x) %>%
select(pitch_id,  count_base_out_state_new, avg_re.double) %>%
rename(count_base_out_state_double = count_base_out_state_new)
hit_data_triple <- triple_next %>% mutate(avg_re.triple = avg_re.y - avg_re.x) %>%
select(pitch_id, count_base_out_state_new, avg_re.triple) %>%
rename(count_base_out_state_triple = count_base_out_state_new)
hit_data_homerun <- homerun_next %>% mutate(avg_re.homerun = avg_re.y - avg_re.x) %>%
select(pitch_id,  count_base_out_state_new, avg_re.homerun) %>%
rename(count_base_out_state_homerun = count_base_out_state_new)
hit_data_outcomes <- hit_data_outcomes %>%
left_join(hit_data_miss, by = "pitch_id") %>%
left_join(hit_data_foul, by = "pitch_id") %>%
left_join(hit_data_out, by = "pitch_id") %>%
left_join(hit_data_single, by = "pitch_id") %>%
left_join(hit_data_double, by = "pitch_id") %>%
left_join(hit_data_triple, by = "pitch_id") %>%
left_join(hit_data_homerun, by = "pitch_id")
hit_data_outcomes <- hit_data_outcomes %>%
mutate(avg_re.ball = ifelse(!is.na(on_1b) & !is.na(on_2b) & !is.na(on_3b) & balls == 3, avg_re.ball + 1, avg_re.ball)) %>%
mutate(avg_re.single = ifelse(is.na(on_3b), avg_re.single, avg_re.single + 1)) %>%
mutate(avg_re.double = ifelse(!is.na(on_3b) & !is.na(on_2b), avg_re.double + 2, ifelse(!is.na(on_3b) | !is.na(on_2b), avg_re.double + 1, avg_re.double))) %>%
mutate(avg_re.triple = ifelse(!is.na(on_3b) & !is.na(on_2b) & !is.na(on_1b), avg_re.triple + 3, ifelse((!is.na(on_3b) & !is.na(on_2b)) | (!is.na(on_1b) & !is.na(on_2b)) | (!is.na(on_3b) & !is.na(on_1b)), avg_re.triple + 2, ifelse(!is.na(on_1b) | !is.na(on_2b) | !is.na(on_3b), avg_re.triple + 1, avg_re.triple)))) %>%
mutate(avg_re.homerun = ifelse(!is.na(on_3b) & !is.na(on_2b) & !is.na(on_1b), avg_re.triple + 4, ifelse((!is.na(on_3b) & !is.na(on_2b)) | (!is.na(on_1b) & !is.na(on_2b)) | (!is.na(on_3b) & !is.na(on_1b)), avg_re.triple + 3, ifelse(!is.na(on_1b) | !is.na(on_2b) | !is.na(on_3b), avg_re.homerun + 2, 1 + avg_re.homerun))))
########
hit_data_outcomes <- hit_data_outcomes %>% mutate(outcome = ifelse(description == "swinging_strike" | description == "swinging_strike_blocked" | description == "foul_tip" | (strikes == 2 & description == "foul_bunt") | description == "bunt_foul_tip" | description == "missed_bunt", "Miss", ifelse(description == "foul" | description == "foul_bunt", "Foul", ifelse(events == "single", "Single", ifelse(events == "double", "Double", ifelse(events == "triple", "Triple", ifelse(events == "home_run", "Homerun", "Out")))))))
hit_data_outcomes <- hit_data_outcomes %>% filter(ERA <= 20)
# ### APPLY DRE
# dre_train <- hit_data_outcomes %>% select(balls, strikes, outs_when_up, on_1b, on_2b, on_3b, OPS, PA, change_re)
#
# xgb.train_dre = xgb.DMatrix(data = as.matrix(dre_train[, -9]))
#
# dre_preds <- predict(dre_mod, xgb.train_dre)
# dre_preds <- as.data.frame(dre_preds)
#
# hit_data_outcomes <- hit_data_outcomes %>% bind_cols(dre_preds)
#
# hit_data_outcomes <- hit_data_outcomes %>% mutate(avg_re.ball = avg_re.ball + dre_preds, avg_re.strike = avg_re.strike + dre_preds, avg_re.miss = avg_re.miss + dre_preds, avg_re.foul = avg_re.foul + dre_preds)
### APPLY RUN EXPECTANCY OF DECISION
hit_data_outcomes <- hit_data_outcomes %>% mutate(re_take = avg_re.ball * (1 - strike_prob) + avg_re.strike * strike_prob)
all_data <- hit_data_outcomes %>% select(plate_x, plate_z, pfx_x, pfx_z, pitch_type, balls, strikes, outs_when_up, release_spin_rate, stand, p_throws, effective_speed, release_speed, PA, BA, OBP, SLG, barrel_perc, avg_exit_velocity, avg_launch_angle, xAVG, xwOBA, wOBA, ISO, IP, ERA, GB.FB, WHIP, SO_perc, uBB_perc, overall_spin_rate, overall_velocity, outcome)
all_lab <- as.factor(all_data$outcome)
all_lab <- as.numeric(as.factor(all_lab))-1
all_data$pitch_type <- as.numeric(as.factor(all_data$pitch_type)) - 1
all_data$p_throws <- as.numeric(as.factor(all_data$p_throws)) - 1
all_data$stand <- as.numeric(as.factor(all_data$stand)) - 1
xgb.all = xgb.DMatrix(data = as.matrix(all_data[, -33]), label = all_lab)
## Predict
all.pred = predict(swing_mod, xgb.all, reshape=T)
all.pred = as.data.frame(all.pred)
names(all.pred) <- levels(all_data$outcome)
all.pred$label <- all_data$outcome
# Use the predicted label with the highest probability
#all.pred$prediction = apply(all.pred,1,function(x) colnames(all.pred)[which.max(x)])
colnames(all.pred)[1:7] <- final_lab
hit_data_outcomes <- cbind(hit_data_outcomes, all.pred)
# Calculate RE of a swing
hit_data_outcomes <- hit_data_outcomes %>% mutate(re_swing = avg_re.miss * Miss + avg_re.foul * Foul + avg_re.out * Out + avg_re.single * Single + avg_re.double * Double + avg_re.triple * Triple + avg_re.homerun * Homerun)
#Now create the stat to evaluate players on
#Expected Runs Added by swinging
hit_data_outcomes <- hit_data_outcomes %>% mutate(expRA_swing = re_swing - re_take, swing = ifelse(description == "ball" | description == "called_strike" | description == "blocked_ball" | description == "pitchout", 0, 1))
hit_data_outcomes <- hit_data_outcomes %>% mutate(abs_eRA_s = abs(expRA_swing), should_swing = ifelse(re_swing > re_take, 1, 0), correct_choice = ifelse(should_swing == swing, 1, 0))
hit_data_outcomes <- hit_data_outcomes %>% mutate(runs_lost_bad_dec = ifelse(correct_choice == 0, abs_eRA_s, 0))
hit_data_outcomes
}
remove(dre_out_orig, dre_out_preds, dre_miss_orig, dre_miss_preds, dre_foul_orig, dre_foul_preds, dre_single_orig, dre_single_preds, dre_double_orig, dre_double_preds, dre_triple_orig, dre_triple_preds, dre_strike_orig, dre_strike_preds, dre_ball_orig, dre_ball_preds, dre_homerun_orig, dre_homerun_preds)
hit_data_outcomes %>% filter(pitcher_name == "A.J. Minter") %>% select(pitcher_name, pitch_id, swing, expRA_swing, re_take, re_swing, avg_re.miss, Miss, avg_re.foul, Foul, avg_re.out, Out, avg_re.single, Single, avg_re.double, Double, avg_re.triple, Triple, avg_re.homerun, Homerun)
remove(hit_data)
remove(all_data)
remove(hit_data_outcomes)
remove(xgb_takes, xgb.test, xgb.train, xgb.train_dre, xgb.train_takes, test_lab, train_lab, sample, strike_prob_preds, takes_preds, train_takes, dre_preds, dre_train)
remove(kZone, params, preds, strikezone_preds)
remove(all.pred, ball_next, double_next, dre_ball_next, dre_foul_next, dre_miss_next, dre_strike_next, foul_next, hit_data_ball, hit_data_double, hit_data_foul, hit_data_homerun, hit_data_miss, hit_data_out, hit_data_single, hit_data_triple, homerun_next, miss_next, out_next, single_next, strike_next, takes, triple_next)
data_2016 <- apply_EAGLE(pitches_2016, startdate = "2016-04-03", enddate = "2016-10-02")
data_2016 <- readRDS("EAGLE_2016.rds")
data_2017 <- readRDS("EAGLE_2017.rds")
data_2018 <- readRDS("EAGLE_2018.rds")
data_2019 <- readRDS("EAGLE_2019.rds")
data_2020 <- readRDS("EAGLE_2020.rds")
data_2021 <- readRDS("EAGLE_2021.rds")
eye_2016 <- data_2016 %>% filter(PA >= 200, !is.na(expRA_swing)) %>% group_by(batter, Name) %>% summarize(year = first(season.x), runs_lost = sum(runs_lost_bad_dec) / sum(abs_eRA_s), wRA = sum(ifelse(swing == 1, expRA_swing, -expRA_swing)), EAGLE = wRA / n(), avg = first(BA), obp = first(OBP), ops = first(OPS),  kperc = first(SO.x) / first(PA), bbperc = first(BB.x) / first(PA), perc_swing_out_zone = sum(ifelse(strike_prob < .3 & swing == 1, 1, 0)) / sum(ifelse(strike_prob < .3, 1, 0)))
eye_2017 <- data_2017 %>% filter(PA >= 200, !is.na(expRA_swing)) %>% group_by(batter, Name) %>% summarize(year = first(season.x), runs_lost = sum(runs_lost_bad_dec) / sum(abs_eRA_s), wRA = sum(ifelse(swing == 1, expRA_swing, -expRA_swing)), EAGLE = wRA / n(), avg = first(BA), obp = first(OBP), ops = first(OPS),  kperc = first(SO.x) / first(PA), bbperc = first(BB.x) / first(PA), perc_swing_out_zone = sum(ifelse(strike_prob < .3 & swing == 1, 1, 0)) / sum(ifelse(strike_prob < .3, 1, 0)))
eye_2018 <- data_2018 %>% filter(PA >= 200, !is.na(expRA_swing)) %>% group_by(batter, Name) %>% summarize(year = first(season.x), runs_lost = sum(runs_lost_bad_dec) / sum(abs_eRA_s), wRA = sum(ifelse(swing == 1, expRA_swing, -expRA_swing)), EAGLE = wRA / n(), avg = first(BA), obp = first(OBP), ops = first(OPS), kperc = first(SO.x) / first(PA), bbperc = first(BB.x) / first(PA), perc_swing_out_zone = sum(ifelse(strike_prob < .3 & swing == 1, 1, 0)) / sum(ifelse(strike_prob < .3, 1, 0)))
eye_2019 <- data_2019 %>% filter(PA >= 200, !is.na(expRA_swing)) %>% group_by(batter, Name) %>% summarize(year = first(season.x), runs_lost = sum(runs_lost_bad_dec) / sum(abs_eRA_s), wRA = sum(ifelse(swing == 1, expRA_swing, -expRA_swing)), EAGLE = wRA / n(), avg = first(BA), obp = first(OBP), ops = first(OPS), kperc = first(SO.x) / first(PA), bbperc = first(BB.x) / first(PA), perc_swing_out_zone = sum(ifelse(strike_prob < .3 & swing == 1, 1, 0)) / sum(ifelse(strike_prob < .3, 1, 0)))
eye_2020 <- data_2020 %>% filter(PA >= 150, !is.na(expRA_swing)) %>% group_by(batter, Name) %>% summarize(year = first(season.x), runs_lost = sum(runs_lost_bad_dec) / sum(abs_eRA_s), wRA = sum(ifelse(swing == 1, expRA_swing, -expRA_swing)), EAGLE = wRA / n(), avg = first(BA), obp = first(OBP), ops = first(OPS), kperc = first(SO.x) / first(PA), bbperc = first(BB.x) / first(PA), perc_swing_out_zone = sum(ifelse(strike_prob < .3 & swing == 1, 1, 0)) / sum(ifelse(strike_prob < .3, 1, 0)))
eye_2021 <- data_2021 %>% filter(PA >= 200, !is.na(expRA_swing)) %>% group_by(batter, Name) %>% summarize(year = first(season.x), runs_lost = sum(runs_lost_bad_dec) / sum(abs_eRA_s), wRA = sum(ifelse(swing == 1, expRA_swing, -expRA_swing)), EAGLE = wRA / n(), avg = first(BA), obp = first(OBP), ops = first(OPS), kperc = first(SO.x) / first(PA), bbperc = first(BB.x) / first(PA), perc_swing_out_zone = sum(ifelse(strike_prob < .3 & swing == 1, 1, 0)) / sum(ifelse(strike_prob < .3, 1, 0)))
eye_all <- eye_2016 %>% full_join(eye_2017, by = c("batter")) %>% full_join(eye_2018, by = c("batter")) %>% full_join(eye_2019, by = c("batter")) %>% full_join(eye_2020, by = c("batter")) %>% full_join(eye_2021, by = c("batter"))
eye_all <- eye_all %>% rename(wRL_2016 = runs_lost.x, wRL_2017 = runs_lost.y, wRL_2018 = runs_lost.x.x, wRL_2019 = runs_lost.y.y, wRL_2020 = runs_lost.x.x.x, wRL_2021 = runs_lost.y.y.y)
eye_this_next1 <- eye_2016 %>% left_join(eye_2017, by = c("batter", "Name"))
eye_this_next2 <- eye_2017 %>% left_join(eye_2018, by = c("batter", "Name"))
eye_this_next3 <- eye_2018 %>% left_join(eye_2019, by = c("batter", "Name"))
eye_this_next <- bind_rows(eye_this_next1, eye_this_next2, eye_this_next3)
remove(eye_this_next1, eye_this_next2, eye_this_next3)
all_years <- rbind(data_2016, data_2017, data_2018, data_2019, data_2020, data_2021)
levs = c("Miss", "Foul", "Out", "Single", "Double", "Triple", "Homerun")
all_years %>%
filter(!is.na(outcome)) %>%
group_by(outcome) %>%
summarize(Miss = mean(Miss, na.rm = T),
Foul = mean(Foul, na.rm = T),
Out = mean(Out, na.rm = T),
Single = mean(Single, na.rm = T),
Double = mean(Double, na.rm = T),
Triple = mean(Triple, na.rm = T),
Homerun = mean(Homerun, na.rm = T)) %>%
mutate(outcome =  factor(outcome, levels = levs)) %>%
arrange(outcome)
####
# Test EAGLE correlation from year to year
eye_this_next_mod <- lm(EAGLE.y ~ EAGLE.x, data = eye_this_next)
summary(eye_this_next_mod)
####
# Test with AVG
ba_eye_mod <- lm(avg.x ~ EAGLE.x, data = eye_this_next)
summary(ba_eye_mod)
next_ba_eye_mod <- lm(avg.y ~ EAGLE.x, eye_this_next)
summary(next_ba_eye_mod)
both_ba_eye_mod <- lm(avg.y ~ EAGLE.x + avg.x, eye_this_next)
summary(both_ba_eye_mod)
# Test for OBP
obp_eye_mod <- lm(obp.x ~ EAGLE.x, data = eye_this_next)
summary(obp_eye_mod)
next_obp_eye_mod <- lm(obp.y ~ EAGLE.x, eye_this_next)
summary(next_obp_eye_mod)
both_obp_eye_mod <- lm(obp.y ~ EAGLE.x + obp.x, eye_this_next)
summary(both_obp_eye_mod)
# Now for OPS
ops_eye_mod <- lm(ops.x ~ EAGLE.x, data = eye_this_next)
summary(ops_eye_mod)
next_ops_eye_mod <- lm(ops.y ~ EAGLE.x, eye_this_next)
summary(next_ops_eye_mod)
ops_ops_eye_mod <- lm(ops.y ~ ops.x, eye_this_next)
summary(ops_ops_eye_mod)
both_ops_eye_mod <- lm(ops.y ~ EAGLE.x + ops.x, eye_this_next)
summary(both_ops_eye_mod)
###
eye_this_next %>% filter(EAGLE.x >= 0) %>% ggplot(aes(x = EAGLE.x, y = bbperc.x)) +
geom_point() +
stat_smooth(method = "lm") +
theme_gdocs() +
labs(title = "Relationship between EAGLE and BB%",
subtitle = "2016-2021") +
xlab("EAGLE") +
ylab("BB%")
bbperc_mod <- lm(bbperc.x ~ EAGLE.x, data = eye_this_next)
summary(bbperc_mod)
eye_this_next %>% filter(EAGLE.x >= 0 & perc_swing_out_zone.x < .8) %>% ggplot(aes(x = EAGLE.x, y = perc_swing_out_zone.x)) +
geom_point() +
stat_smooth(method = "lm") +
theme_gdocs() +
labs(title = "Relationship between EAGLE and O%",
subtitle = "2016-2021") +
xlab("EAGLE") +
ylab("O%")
operc_mod <- lm(perc_swing_out_zone.x ~ EAGLE.x, data = eye_this_next)
summary(operc_mod)
eye_this_next %>% filter(EAGLE.x >= 0) %>% ggplot(aes(x = EAGLE.x, y = EAGLE.y)) +
geom_point() +
stat_smooth(method = "lm") +
theme_gdocs() +
labs(title = "Relationship between EAGLEs from year to year",
subtitle = "2016-2021") +
xlab("EAGLE 1") +
ylab("EAGLE 2")
View(eye_2016)
# Load libraries
library(tidyverse)
eagle_2016 <- read.csv("EAGLE_2016.rds")
eagle_2017 <- read.csv("EAGLE_2017.rds")
# Load libraries
library(tidyverse)
eagle_2016 <- readRDS("EAGLE_2016.rds")
eagle_2017 <- readRDS("EAGLE_2017.rds")
eagle_2018 <- readRDS("EAGLE_2018.rds")
eagle_2019 <- readRDS("EAGLE_2019.rds")
eagle_2020 <- readRDS("EAGLE_2020.rds")
eagle_2021 <- readRDS("EAGLE_2021.rds")
View(eye_2016)
View(eye_2021)
gc()
# Load libraries
library(tidyverse)
# Load EAGLE data
eagle_2016 <- readRDS("EAGLE_2016.rds")
eagle_2017 <- readRDS("EAGLE_2017.rds")
eagle_2018 <- readRDS("EAGLE_2018.rds")
eagle_2019 <- readRDS("EAGLE_2019.rds")
eagle_2020 <- readRDS("EAGLE_2020.rds")
eagle_2021 <- readRDS("EAGLE_2021.rds")
# Load FanGraphs data
glimpse(eagle_2021)
# Load libraries
library(tidyverse)
# Load EAGLE data
data_2016 <- readRDS("EAGLE_2016.rds")
data_2017 <- readRDS("EAGLE_2017.rds")
data_2018 <- readRDS("EAGLE_2018.rds")
data_2019 <- readRDS("EAGLE_2019.rds")
data_2020 <- readRDS("EAGLE_2020.rds")
data_2021 <- readRDS("EAGLE_2021.rds")
# Load FanGraphs data
eagle_2016 <- data_2016 %>% group_by(batter, Name) %>% summarize(year = first(season.x), runs_lost = sum(runs_lost_bad_dec) / sum(abs_eRA_s), wRA = sum(ifelse(swing == 1, expRA_swing, -expRA_swing)), EAGLE = wRA / n(), avg = first(BA), obp = first(OBP), ops = first(OPS),  kperc = first(SO.x) / first(PA), bbperc = first(BB.x) / first(PA), perc_swing_out_zone = sum(ifelse(strike_prob < .3 & swing == 1, 1, 0)) / sum(ifelse(strike_prob < .3, 1, 0)))
View(eagle_2016)
eagle_2016 <- data_2016 %>% filter(PA >= 200, !is.na(expRA_swing)) %>% group_by(batter, Name) %>% summarize(year = first(season.x), runs_lost = sum(runs_lost_bad_dec) / sum(abs_eRA_s), wRA = sum(ifelse(swing == 1, expRA_swing, -expRA_swing)), EAGLE = wRA / n(), avg = first(BA), obp = first(OBP), ops = first(OPS),  kperc = first(SO.x) / first(PA), bbperc = first(BB.x) / first(PA), perc_swing_out_zone = sum(ifelse(strike_prob < .3 & swing == 1, 1, 0)) / sum(ifelse(strike_prob < .3, 1, 0)))
View(eagle_2016)
